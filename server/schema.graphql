type Query{
    users: [User]!
    auth: User
    getUnread(senderId: ID!, recipientId: ID!): UnreadResult
}

type Mutation {
  markMessagesAsRead(senderId: ID!): Boolean
  createUnread(input: CreateUnreadInput!): UnreadResult
  clearUnread(senderId: ID!, recipientId: ID!): Boolean
}

input CreateUnreadInput {
  senderId: ID!
  recipientId: ID!
  newMessage: String
}

type UnreadResult {
  count: Int
  lastMessage: String
}

type UnreadCount {
  count: Int
  lastMessage: String
}

type UnreadCountEntry {
  senderId: ID
  data: UnreadCount
}

type User {
    _id: ID
    username: String
    email: String
    picture: String
    lastMessage: String
    lastMessageCount: Int
    isOnline: Boolean
    unread: [UnreadMsg]
}

type ChatMessage {
  _id: ID!
  content: String
  sender: User
  receiver: User
  createdAt: String
  updatedAt: String
}

type UnreadMsg {
  _id: ID!
  sender: User
  recipient: User
  count: Int
  lastMessage: String
  createdAt: String
  updatedAt: String
}
